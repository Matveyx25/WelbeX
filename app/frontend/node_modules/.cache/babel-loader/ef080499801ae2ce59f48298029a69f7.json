{"ast":null,"code":"import { tablesAPI } from \"../api\"; // consts\n\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst SET_TABLES = 'SET_TABLES';\nconst SET_PAGES = \"SET\";\nlet initialState = {\n  tables: [],\n  isFetching: false,\n  pages: null\n}; // reducers\n\nexport const tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_TABLES:\n      return { ...state,\n        tables: action.tables\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    default:\n      return state;\n  }\n}; // dispatches\n\nconst setTables = tables => ({\n  type: SET_TABLES,\n  tables\n});\n\nconst toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\n\nexport const requestTables = page => async dispatch => {\n  dispatch(toggleIsFetching(true));\n  const response = await tablesAPI.getTables(page);\n\n  if (response.status == 200) {\n    dispatch(setTables(response.data));\n    dispatch(toggleIsFetching(false));\n  } else {\n    console.log(response);\n    dispatch(toggleIsFetching(false));\n  }\n};","map":{"version":3,"names":["tablesAPI","TOGGLE_IS_FETCHING","SET_TABLES","SET_PAGES","initialState","tables","isFetching","pages","tablesReducer","state","action","type","setTables","toggleIsFetching","requestTables","page","dispatch","response","getTables","status","data","console","log"],"sources":["/Users/matveystepanov/Documents/WelbeX/front/src/redux/tables-reducers.js"],"sourcesContent":["import { tablesAPI } from \"../api\"\n\n// consts\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst SET_TABLES = 'SET_TABLES'\nconst SET_PAGES = \"SET\"\n\nlet initialState = {\n    tables: [],\n    isFetching: false,\n    pages: null\n}\n\n// reducers\nexport const tablesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_TABLES: \n            return {...state, tables: action.tables}\n        case TOGGLE_IS_FETCHING: \n            return {...state, isFetching: action.isFetching}\n        default: \n            return state\n    }\n}\n\n// dispatches\nconst setTables = (tables) => ({ type: SET_TABLES, tables })\nconst toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\n\nexport const requestTables = (page) => async (dispatch) => {\n    dispatch(toggleIsFetching(true))\n    const response = await tablesAPI.getTables(page)\n    if(response.status == 200){\n        dispatch(setTables(response.data))\n        dispatch(toggleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toggleIsFetching(false))\n    }\n}"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,SAAS,GAAG,KAAlB;AAEA,IAAIC,YAAY,GAAG;EACfC,MAAM,EAAE,EADO;EAEfC,UAAU,EAAE,KAFG;EAGfC,KAAK,EAAE;AAHQ,CAAnB,C,CAMA;;AACA,OAAO,MAAMC,aAAa,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBL,YAAyB;EAAA,IAAXM,MAAW;;EAC3D,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKT,UAAL;MACI,OAAO,EAAC,GAAGO,KAAJ;QAAWJ,MAAM,EAAEK,MAAM,CAACL;MAA1B,CAAP;;IACJ,KAAKJ,kBAAL;MACI,OAAO,EAAC,GAAGQ,KAAJ;QAAWH,UAAU,EAAEI,MAAM,CAACJ;MAA9B,CAAP;;IACJ;MACI,OAAOG,KAAP;EANR;AAQH,CATM,C,CAWP;;AACA,MAAMG,SAAS,GAAIP,MAAD,KAAa;EAAEM,IAAI,EAAET,UAAR;EAAoBG;AAApB,CAAb,CAAlB;;AACA,MAAMQ,gBAAgB,GAAIP,UAAD,KAAiB;EAAEK,IAAI,EAAEV,kBAAR;EAA4BK;AAA5B,CAAjB,CAAzB;;AAEA,OAAO,MAAMQ,aAAa,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;EACvDA,QAAQ,CAACH,gBAAgB,CAAC,IAAD,CAAjB,CAAR;EACA,MAAMI,QAAQ,GAAG,MAAMjB,SAAS,CAACkB,SAAV,CAAoBH,IAApB,CAAvB;;EACA,IAAGE,QAAQ,CAACE,MAAT,IAAmB,GAAtB,EAA0B;IACtBH,QAAQ,CAACJ,SAAS,CAACK,QAAQ,CAACG,IAAV,CAAV,CAAR;IACAJ,QAAQ,CAACH,gBAAgB,CAAC,KAAD,CAAjB,CAAR;EACH,CAHD,MAGK;IACDQ,OAAO,CAACC,GAAR,CAAYL,QAAZ;IACAD,QAAQ,CAACH,gBAAgB,CAAC,KAAD,CAAjB,CAAR;EACH;AACJ,CAVM"},"metadata":{},"sourceType":"module"}
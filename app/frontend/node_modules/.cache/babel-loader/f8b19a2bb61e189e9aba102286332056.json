{"ast":null,"code":"import { tablesAPI } from \"../api\"; // consts\n\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst SET_TABLES = 'SET_TABLES';\nconst SET_PAGES = \"SET_PAGES\";\nlet initialState = {\n  tables: [],\n  isFetching: false,\n  pages: null\n}; // reducers\n\nexport const tablesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_TABLES:\n      return { ...state,\n        tables: action.tables\n      };\n\n    case SET_PAGES:\n      return { ...state,\n        pages: action.pages\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    default:\n      return state;\n  }\n}; // dispatches\n\nconst setTables = tables => ({\n  type: SET_TABLES,\n  tables\n});\n\nconst setPages = pages => ({\n  type: SET_PAGES,\n  pages\n});\n\nconst toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\n\nexport const requestTables = function (page) {\n  let column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n\n    if (column && condition && value) {}\n\n    const response = await tablesAPI.getTables(page, column, condition, value);\n\n    if (response.status === 200) {\n      dispatch(setTables(response.data.data));\n      dispatch(setPages(response.data.pages));\n      dispatch(toggleIsFetching(false));\n    } else {\n      console.log(response);\n      dispatch(toggleIsFetching(false));\n    }\n  };\n};","map":{"version":3,"names":["tablesAPI","TOGGLE_IS_FETCHING","SET_TABLES","SET_PAGES","initialState","tables","isFetching","pages","tablesReducer","state","action","type","setTables","setPages","toggleIsFetching","requestTables","page","column","condition","value","dispatch","response","getTables","status","data","console","log"],"sources":["/Users/matveystepanov/Documents/WelbeX/front/src/redux/tables-reducers.js"],"sourcesContent":["import { tablesAPI } from \"../api\"\n\n// consts\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst SET_TABLES = 'SET_TABLES'\nconst SET_PAGES = \"SET_PAGES\"\n\nlet initialState = {\n    tables: [],\n    isFetching: false,\n    pages: null\n}\n\n// reducers\nexport const tablesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_TABLES: \n            return {...state, tables: action.tables}\n        case SET_PAGES: \n            return {...state, pages: action.pages}\n        case TOGGLE_IS_FETCHING: \n            return {...state, isFetching: action.isFetching}\n        default: \n            return state\n    }\n}\n\n// dispatches\nconst setTables = (tables) => ({ type: SET_TABLES, tables })\nconst setPages = (pages) => ({ type: SET_PAGES, pages })\nconst toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\n\nexport const requestTables = (page, column = null, condition = null, value = null) => async (dispatch) => {\n    dispatch(toggleIsFetching(true))\n    if(column && condition && value){\n        \n    }\n    const response = await tablesAPI.getTables(page, column, condition, value)\n    if(response.status === 200){\n        dispatch(setTables(response.data.data))\n        dispatch(setPages(response.data.pages))\n        dispatch(toggleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toggleIsFetching(false))\n    }\n}"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAEA,IAAIC,YAAY,GAAG;EACfC,MAAM,EAAE,EADO;EAEfC,UAAU,EAAE,KAFG;EAGfC,KAAK,EAAE;AAHQ,CAAnB,C,CAMA;;AACA,OAAO,MAAMC,aAAa,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBL,YAAyB;EAAA,IAAXM,MAAW;;EAC3D,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKT,UAAL;MACI,OAAO,EAAC,GAAGO,KAAJ;QAAWJ,MAAM,EAAEK,MAAM,CAACL;MAA1B,CAAP;;IACJ,KAAKF,SAAL;MACI,OAAO,EAAC,GAAGM,KAAJ;QAAWF,KAAK,EAAEG,MAAM,CAACH;MAAzB,CAAP;;IACJ,KAAKN,kBAAL;MACI,OAAO,EAAC,GAAGQ,KAAJ;QAAWH,UAAU,EAAEI,MAAM,CAACJ;MAA9B,CAAP;;IACJ;MACI,OAAOG,KAAP;EARR;AAUH,CAXM,C,CAaP;;AACA,MAAMG,SAAS,GAAIP,MAAD,KAAa;EAAEM,IAAI,EAAET,UAAR;EAAoBG;AAApB,CAAb,CAAlB;;AACA,MAAMQ,QAAQ,GAAIN,KAAD,KAAY;EAAEI,IAAI,EAAER,SAAR;EAAmBI;AAAnB,CAAZ,CAAjB;;AACA,MAAMO,gBAAgB,GAAIR,UAAD,KAAiB;EAAEK,IAAI,EAAEV,kBAAR;EAA4BK;AAA5B,CAAjB,CAAzB;;AAEA,OAAO,MAAMS,aAAa,GAAG,UAACC,IAAD;EAAA,IAAOC,MAAP,uEAAgB,IAAhB;EAAA,IAAsBC,SAAtB,uEAAkC,IAAlC;EAAA,IAAwCC,KAAxC,uEAAgD,IAAhD;EAAA,OAAyD,MAAOC,QAAP,IAAoB;IACtGA,QAAQ,CAACN,gBAAgB,CAAC,IAAD,CAAjB,CAAR;;IACA,IAAGG,MAAM,IAAIC,SAAV,IAAuBC,KAA1B,EAAgC,CAE/B;;IACD,MAAME,QAAQ,GAAG,MAAMrB,SAAS,CAACsB,SAAV,CAAoBN,IAApB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,KAA7C,CAAvB;;IACA,IAAGE,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;MACvBH,QAAQ,CAACR,SAAS,CAACS,QAAQ,CAACG,IAAT,CAAcA,IAAf,CAAV,CAAR;MACAJ,QAAQ,CAACP,QAAQ,CAACQ,QAAQ,CAACG,IAAT,CAAcjB,KAAf,CAAT,CAAR;MACAa,QAAQ,CAACN,gBAAgB,CAAC,KAAD,CAAjB,CAAR;IACH,CAJD,MAIK;MACDW,OAAO,CAACC,GAAR,CAAYL,QAAZ;MACAD,QAAQ,CAACN,gBAAgB,CAAC,KAAD,CAAjB,CAAR;IACH;EACJ,CAd4B;AAAA,CAAtB"},"metadata":{},"sourceType":"module"}